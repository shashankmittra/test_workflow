# Documentation on available configuration
# https://cloud.ibm.com/docs/devsecops?topic=devsecops-cd-devsecops-apps-byoa
# https://cloud.ibm.com/docs/devsecops?topic=devsecops-custom-scripts

version: '2'

tasks:
  ### CI Pipeline Configuration ###
  # The ci-pipeline includes the following four configurable tasks:
  #   * code-checks
  #   * code-build
  #   * deploy-checks
  #   * deploy-release
  code-checks:
    include:
      - dind
    # code-checks includes five configurable steps:
    #   * checks-setup
    #   * detect-secrets
    #   * compliance-checks
    #   * peer-review
    #   * static-scan
    steps:
      - name: checks-setup
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.54
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          if [[ "$(get_env pipeline_namespace)" == *"pr"* ||  "$(get_env pipeline_namespace)" == *"ci"* ]]; then
            source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/code_setup.sh

            # ensure we're located in the source app repo
            cd "$WORKSPACE/$(load_repo app-repo path)"

            # update the dependency in the source app
            npm ci
          fi
      - name: detect-secrets
        include:
          - docker-socket
      - name: compliance-checks
        include:
          - docker-socket
      - name: static-scan
        include:
          - docker-socket

  # Configuration for the code-build task in the ci-pipeline
  code-build:
    include:
      - dind
    # code-build includes five configurable steps:
    #   * setup
    #   * unit-test
    #   * build-artifact
    #   * sign-artifact
    #   * scan-artifact
    steps:
      - name: setup
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.54
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          if [[ "$(get_env pipeline_namespace)" == *"pr"* ||  "$(get_env pipeline_namespace)" == *"ci"* ]]; then
            source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/code_setup.sh

            # ensure we're located in the source app repo
            cd "$WORKSPACE/$(load_repo app-repo path)"

            # update the dependency in the source app
            npm ci
          fi
      - name: unit-test
        onError: continue
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.54
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          # ensure we're located in the source app repo
          cd "$WORKSPACE/$(load_repo app-repo path)"
          source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/run_test.sh
          run_unit_test
      - name: build-artifact
        include:
          - docker-socket
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.54
        script: |
          #!/usr/bin/env bash

          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi

          # ensure we build the app repo Dockerfile
          cd "$WORKSPACE/$(load_repo app-repo path)"

          source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/build_setup.sh
          source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/build.sh
      - name: sign-artifact
        when: 'false'

  # Configuration for the deploy-checks task in the ci-pipeline
  deploy-checks:
    include:
      - dind
    # deploy-checks includes three configurable steps:
    #   * deploy
    #   * dynamic-scan
    #   * acceptance-test
    steps:
      - name: deploy
        image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.59
        script: |
          #!/usr/bin/env bash

          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi

          source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/run_test.sh
          source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/deploy_setup.sh
          if [[ $(get_env deployment-type "deployment") == "helm" ]]; then
            source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/deploy_helm.sh
            save_deployment_artifact iks_helm_deployment/Chart.yaml IKS helm
            save_deployment_artifact iks_helm_deployment/values.yaml IKS dev-config
            save_deployment_artifact os_helm_deployment/values.yaml OPENSHIFT dev-config
            save_deployment_artifact os_helm_deployment/Chart.yaml OPENSHIFT helm
          else
            source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/deploy.sh
            save_deployment_artifact deployment_iks.yml IKS deployment
            save_deployment_artifact deployment_os.yml OPENSHIFT deployment
          fi
      - name: dynamic-scan
        include:
          - docker-socket
        onError: continue
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.54
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          if [ -z "$(get_env opt-in-dynamic-scan "")" ]; then
            echo "If you want to enable this stage, add 'opt-in-dynamic-scan' parameter to your pipeline with any value. Also, please add 'opt-in-dynamic-api-scan' to your pipeline with any value to have api scans running, and 'opt-in-dynamic-ui-scan' with any value to have ui scans running" >&2
          else
            if [[ "$(get_env pipeline_namespace)" == *"cc"* ]]; then
              app_url=$(get_env app-url "")
              if [[ -z "${app_url}" ]]; then
                echo "Please provide the app-url as the running application url. Recommended to use stage/test environment to run the Dynamic scan." >&2
                exit 1
              fi
              source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/zap/zap-cc-config
            fi
            source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/zap/trigger-async-zap
          fi
      - name: acceptance-test
        onError: continue
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.54
        script: |
          #!/usr/bin/env bash

          export APP_URL=$(get_env app-url)
          source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/run_test.sh    
          run_acceptance_test

  # Configuration for the deploy-release task in the ci-pipeline
  deploy-release:
    # deploy-release includes one configurable step: run-stage
    steps:
      - name: run-stage
        onError: continue
        image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.59
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          if [[ $(get_env deployment-type "deployment") == "helm" ]]; then
            source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/run_test.sh
            save_deployment_artifact iks_helm_deployment/pre-prod-values.yaml IKS pre-prod-config
            save_deployment_artifact iks_helm_deployment/prod-values.yaml IKS prod-config
            save_deployment_artifact os_helm_deployment/pre-prod-values.yaml OPENSHIFT pre-prod-config
            save_deployment_artifact os_helm_deployment/prod-values.yaml OPENSHIFT prod-config
          fi
          source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/release.sh

  # Configuration for owasp-zap or async-stage in the async-pipeline
  async-stage:
    include:
      - dind
    # async-stage includes one configurable step: run-stage
    # configuration for owasp-zap is also required, as the step is renamed when triggering the async-pipeline
    steps:
      - name: run-stage
        include:
          - docker-socket
        image: icr.io/continuous-delivery/pipeline/pipeline-base-image:3.54
      - name: owasp-zap
        script: |
          #!/usr/bin/env bash

          source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/zap/trigger_zap_scans

  ### PR Pipeline Configuration ###
  # The pr-pipeline includes one configurable task: pr-code-checks
  pr-code-checks:
    include:
      - dind
    # pr-code-checks includes four configurable steps:
    #   * checks-setup
    #   * detect-secrets
    #   * unit-test
    #   * compliance-checks
    steps:
      - name: checks-setup
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.54
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          if [[ "$(get_env pipeline_namespace)" == *"pr"* ||  "$(get_env pipeline_namespace)" == *"ci"* ]]; then
            source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/code_setup.sh

            # ensure we're located in the source app repo
            cd "$WORKSPACE/$(load_repo app-repo path)"

            # update the dependency in the source app
            npm ci
          fi
      - name: detect-secrets
        include:
          - docker-socket
      - name: unit-test
        onError: continue
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.54
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          # ensure we're located in the source app repo
          cd "$WORKSPACE/$(load_repo app-repo path)"
          source $WORKSPACE/$PIPELINE_CONFIG_REPO_PATH/scripts/run_test.sh
          run_unit_test
      - name: compliance-checks
        include:
          - docker-socket

finally:
  # The ci-pipeline includes one configurable finally task: code-ci-finish
  code-ci-finish:
    steps:
      - name: run-stage
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.54
        script: |
          #!/usr/bin/env bash

          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          echo "Running code-ci-finish"
          exit 0
  # The pr-pipeline includes one configurable finally task: code-pr-finish
  code-pr-finish:
    steps:
      - name: run-stage
        image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.54
        script: |
          #!/usr/bin/env bash

          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
            trap env EXIT
            env
            set -x
          fi
          echo "Running code-ci-finish"
          exit 0
